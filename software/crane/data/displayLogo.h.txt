// logo
// ============================================================

// COLOR PICKER: <http://www.barth-dev.de/online/rgb565-color-picker/>

// Interesting stuff
// =====================
//lcdTestPattern();

#define boxShadow  0xB080 
#define boxBody    RED    
#define textShadow 0xF2C8 
#define textBody   BLACK

// STYLE 3 --------------

#define textShadow3 0x124A //0x3495
#define textBody3   0x01C8 //0x132F
#define boxShadow3B 0x0062
#define boxShadow3  0x00E4 //0x0126
#define boxBody3    0x0062 //0x0126

//STYLE 4 -------------------------
float style4Colors[] = {0x2B0E,0x4BB1,0x4BB1,0x4370,0x4370,0x3B2F,0x3B2F,0x3AEE,0x3AEE,0x32AC,0x32AC,0x328B,0x328B,0x328B,0x328B,0x2A2A,0x2A2A,0x21E9,0x21E9,0x21C8,0x21C8,0x01C8};
float style4SHadows[]= {0x5412,0x22CD,0x22AC,0x22AC,0x226B,0x226B,0x1A2A,0x1A2A,0x19E9,0x19E9,0x11C8,0x11C8,0x11A7,0x11A7,0x11A7,0x11A7,0x1167,0x1167,0x1146,0x1146,0x0904,0x0106};                       
int   style4pause[]  = {2000,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20};

void displayLogo(bool Loop=true, int style=2, String txt="HAG\n", int duration=9999) {
  // `txt` represents `F("text...\n")` 
  
  if (style == 1) {
    display.fillScreen(BLACK); 
    display.fillRoundRect(0, 53, 320, 27, 5, 0x132F); //x1,y1,x2,y2, cornerSoftness
    display.setTextColor(BLACK, WHITE);               // Draw 'inverse' text
    display.setTextSize(3);                           // Draw 3X-scale text
    display.setCursor(1,55);                          // Start at top-left corner
    display.setTextColor(BLACK, 0x3495);              // Draw 'inverse' text
    display.print(txt);
    display.setTextSize(1); 
    display.setCursor(50,84);
    display.setTextColor(0x3495);
    display.print(F("QT-122\n")); 
  }

  if (style == 2) {

    display.fillScreen(BLACK); 
    display.fillRoundRect(0, 45, 128, 48, 2, boxShadow);
    display.fillRoundRect(2, 47, 126, 44, 2, boxBody);
    display.setCursor(1,55);             // Start at top-left corner
    display.setTextColor(textShadow);
    display.setTextSize(3);
    display.print(txt); 
    display.setCursor(2,55);             // Start at top-left corner
    display.setTextColor(textBody);
    display.print(txt); 
  }

  if (style == 3) {
    display.fillScreen(BLACK); 
    display.setTextSize(1);
    //display.fillRoundRect(0, 100, 128, 30, 0, boxShadow3B);
    //display.fillRoundRect(0, 50, 128, 28, 0, boxShadow3);
    //display.fillRoundRect(2, 67, 126, 10,  2, 0x00E3);
    //display.fillRoundRect(2, 70, 126, 7,   2, 0x00E1);
    
    display.setCursor(17,130);             // Start at top-left corner
    display.setTextColor(style4Colors[1]);
    
    //display.setFont(&FreeMono12pt7b);
    //display.setFont(&Picopixel);
    display.print(txt); 
    //display.setCursor(11,121);             // Start at top-left corner
    //display.setTextColor(textBody3);
    //display.print(txt); 

    // DRAW A LINE FOR GUIDENCE
    //display.fillRoundRect(0, 120, 320, 1, 0, 0x00104);
  }

  if (style == 4) {
    display.fillScreen(BLACK); 
    display.setTextSize(3);
    display.fillRoundRect(0, 53, 128, 5, 0, 0x00104); //x1,y1,x2,y2, cornerSoftness
    display.fillRoundRect(0, 55, 127, 10, 2, 0x00E4); //0x00E4
    display.fillRoundRect(0, 65, 127, 12, 2, 0x00A4); //0x00A4
    display.fillRoundRect(0, 77, 128, 1, 0, 0x0062);

    // run a loop based on the length of the color and delay, which should be of equal size
    int Len = (sizeof(style4pause)/ sizeof(style4pause[0]));
    int dur = 0;
    for (int i = 0; i < Len; i++) {
      //display.setFont(&FreeMono12pt7b);
      //display.setFont(&Picopixel);
      if (dur <= duration) {
        display.setCursor(1,55);             // Start at top-left corner
        display.setTextColor(style4SHadows[i]);  //0x01C8
        display.print(txt); 
        display.setCursor(2,54);             // Start at top-left corner
        display.setTextColor(style4Colors[i]);  //0x0127
        display.print(txt); 
        delay(int(style4pause[i]));
      } else {
        // turn the screen off when the duration is passed
        display.fillScreen(BLACK); 
      }
      dur = dur + int(style4pause[i]);
    }
  }

  if (style == 5) {
    display.fillScreen(BLACK); 
    display.setTextSize(2);
    display.fillRoundRect(0, 48, 128, 30, 0, boxShadow3B);
    display.fillRoundRect(0, 50, 128, 28, 0, boxShadow3);
    //display.fillRoundRect(2, 67, 126, 10,  2, 0x00E3);
    //display.fillRoundRect(2, 70, 126, 7,   2, 0x00E1);
    
    display.setCursor(1,55);             // Start at top-left corner
    display.setTextColor(textShadow3);
    
    //display.setFont(&FreeMono12pt7b);
    //display.setFont(&Picopixel);
    display.print(txt); 
    display.setCursor(2,54);             // Start at top-left corner
    ////display.setTextColor(textBody3);
    ////display.print(txt); 
  }
  

  //delay(30000);
  
  
  //display.setFont(&FreeMonoBoldOblique12pt7b);
  //display.setFont(&Picopixel);
  //display.setFont(&FreeMono12pt7b);
  
  
  
  
  
  
  
  

  //x1, y1
  
  
  
  //display.print(F("0x")); 
  //display.println(0xDEADBEEF, HEX);

  //delay(5000);
  
  //display.display();
  //while (Loop) {
  //  display.fillScreen(BLACK);
  //display.fillRoundRect(25, 10, 78, 60, 8, WHITE);
  //display.fillTriangle(42, 20, 42, 60, 90, 40, RED);
  //delay(500);
  // pause
  //display.fillRoundRect(25, 90, 78, 60, 8, WHITE);
  //display.fillRoundRect(39, 98, 20, 45, 5, GREEN);
  //display.fillRoundRect(69, 98, 20, 45, 5, GREEN);
  
    //delay(500);
    //display.invertDisplay(true);
    //delay(1000);
    //display.invertDisplay(false);
  //}
  
  // Invert and restore display, pausing in-between
  
  //delay(1000);
}


void processScreen(int wait=3000,
                   int style = 1,
                   bool changeColor=true,
                   int col = 10) {
  if (style == 1) {
    display.fillScreen(BLACK); 
    display.setTextSize(3);

    //display.fillRoundRect(0, 45, 128, 5, 0, 0x0083); //HAT
    display.fillRoundRect(0, 53, 128, 5, 0, 0x00104); //0x0062
    display.fillRoundRect(0, 55, 127, 10, 2, 0x00E4); //0x00E4
    display.fillRoundRect(0, 65, 127, 12, 2, 0x00A4); //0x00A4
    display.fillRoundRect(0, 77, 128, 1, 0, 0x0062);

    int Len = (sizeof(style4pause)/ sizeof(style4pause[0]));
    int steps = int(128/Len) + 2;
    int j = 0; 
    for (int i = 0; i < 128; i++) {
      if (changeColor) {
        if (i % steps == 0) j = j+1;  // update color for every 10 iterations
        display.fillRoundRect(0, 56, i, 17, 5, style4Colors[Len-j]); //0x0062
      } else {
        display.fillRoundRect(0, 56, i, 17, 5, style4Colors[col]); //0x0062
      }

      //there is a lot of killed time in between waiting loops, that's taken by the monitor!
      // therefore, assuming linear waiting time, this procedure can be slowed down
      waitingTime = (wait/128)/10 ;
      delay(waitingTime); 
    }
  }
}